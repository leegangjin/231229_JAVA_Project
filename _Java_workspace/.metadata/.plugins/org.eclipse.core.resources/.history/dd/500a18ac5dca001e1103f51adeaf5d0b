package Bar;

import java.util.ArrayList;
import java.util.Scanner;

public class MenuManager extends Thread {

	ArrayList<Menu> alc = new ArrayList<>();//술메뉴
	ArrayList<Menu> food = new ArrayList<>();//음식메뉴
	private ArrayList<MenuInfo> mate = new ArrayList<>();//술정보

	//기본메뉴구성
	public void addMenu() {
		alc.add(new Menu("말리부오렌지", 7000, "5% vol"));
		alc.add(new Menu("모스코몰", 6000, "8% vol"));
		alc.add(new Menu("모히토", 11000, "6% vol"));
		alc.add(new Menu("깔루아밀크", 12000, "6% vol"));
		alc.add(new Menu("미도리사워", 7000, "5% vol"));

		food.add(new Menu("치즈플래터", 18000));
		food.add(new Menu("버팔로윙",20000));
		food.add(new Menu("나쵸", 15000));
		food.add(new Menu("제철과일", 19000));
		food.add(new Menu("마른안주", 15000));

		mate.add(new MenuInfo("말리부럼 45ml\r\n오렌지주스 100ml\r\n웨지라임 1개"));
		mate.add(new MenuInfo("앱솔루트 45ml\r\n라임주스 15ml\r\n진저비어 1병\r\n웨지라임 1개"));
		mate.add(new MenuInfo("라이트럼 50ml\r\n라임주스 30ml\r\n탄산수 1개\r\n설탕 1티스푼\r\n민트잎 8장\r\n웨지라임 1개"));
		mate.add(new MenuInfo("앱솔루트 45ml\r\n깔루아 25ml\r\n에스프레소 25ml\r\n커피콩 3개"));
		mate.add(new MenuInfo("드라이버무스 10ml\r\n진 40ml\r\n멜론리큐어 10ml"));
	}

	//메뉴판출력
	public void printMenu(Scanner scan) throws InterruptedException {
		System.out.println("   ┎━━━━━━━━━━━━━━━━━ M E N U ━━━━━━━━━━━━━━━━━━━━━┒");
		System.out.println("   ┃D R I N K                                      ");
		System.out.println();
		for(int i=0; i<alc.size(); i++) {
			System.out.println("   ┃"+alc.get(i).getDrink()+" "+alc.get(i).getAc()+ " - - - "+alc.get(i).getPrice()+"원");
		}
		System.out.println();
		System.out.println("   ┃F O O D                                        ");
		System.out.println();
		for(int i=0; i<food.size(); i++) {
			System.out.println("   ┃"+food.get(i).getFood()+" - - - "+food.get(i).getPrice()+"원");
		}
		System.out.println();
		System.out.println("   ┃T O D A Y  M E N U (추천메뉴)                    ");
		todayMenu();
		System.out.println("   ┖━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┚");
		System.out.println();
		System.out.println("   ! 레시피가 궁금한 칵테일이 있다면 칵테일 이름을 입력해주세요 ! ▷");
		System.out.println("        (해당 정보를 원하지 않는다면 x 를 입력해주세요.)");

		String name = scan.next();

		for(int i=0; i<alc.size(); i++) {
			if(name.equals(alc.get(i).getDrink())){
				System.out.println("   - - - "+alc.get(i).getDrink()+" 레시피 정보 - - -");
				for(int j=0; j<mate.size(); j++) {
					if(alc.get(j).getDrink().equals(name)) {
					switch(name) {
					case"말리부오렌지":
						Thread.sleep(500);
						run();
						Thread.sleep(500);
						run();
						
						mate.get(j).printMenuInfo();
						
						break;
					case"모스코몰":
						Thread.sleep(500);
						run();
						Thread.sleep(500);
						run();
						
						mate.get(j).printMenuInfo();
						break;
					case"모히토":
						Thread.sleep(500);
						run();
						Thread.sleep(500);
						run();
						
						mate.get(j).printMenuInfo();
						break;
					case"깔루아밀크" :
						Thread.sleep(500);
						run();
						Thread.sleep(500);
						run();
						
						mate.get(j).printMenuInfo();
						break;
					case"미도리사워":
						Thread.sleep(500);
						run();
						Thread.sleep(500);
						run();
						
						mate.get(j).printMenuInfo();
						
						break;
					default: System.out.println("없는 메뉴입니다."); break;
					
					}
						return;
					}
				}
			}

		}if(name.equals("x")) {
			System.out.println("                    메뉴로 이동합니다.");
			return;
		}
		System.out.println("없는 메뉴입니다.");
		

	}

	//추천조합
	public void todayMenu(){

		int r=(int)(Math.random()*alc.size());
		String ranDrink = alc.get(r).getDrink();

		int a=(int)(Math.random()*food.size());
		String ranFood = food.get(a).getFood();

		System.out.println("   ㄴ▷"+ranDrink+ " & "+ranFood + " 을/를 드셔보시는 건 어떨까요?");
		return;
	}

	@Override
	public void run() {
		System.out.println("⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠠⠠⠤⠄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⢰⠀⠀⠀⢰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡆⠀⠀⠀⢨⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡁⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⢀⠊⠉⠀⠀⠉⠁⠢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡆⠀⣀⠀⡄⠀⠀⠀⠀⠀⠀⢠⠁⠀⠀⠀⠀⠀⠀⠀⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠰⠑⡀⢃⠃⢣⠀⠀⢠⣰⣶⣤⣆⣀⣀⣀⡀⠀⠀⠀⠀⠰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⣇⠑⣸⠘⠄⠆⠀⠈⠲⠭⡗⣎⡴⣭⣶⣭⡯⣟⡓⣶⣤⣌⡠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⢆⠐⠠⠁⠌⡘⢀⠀⠀⠘⠘⢿⣗⡿⣝⣿⢞⣽⢢⢡⢺⡵⠯⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠠⡡⢂⠁⢂⠐⠠⢂⠀⠀⠀⠸⣿⣝⣯⢳⣏⢾⢙⠈⢺⡽⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⡏⠀⠙⢠⠈⡐⠘⡀⠀⠀⠀⠿⢼⣶⣫⡾⡛⢌⠐⠠⢒⠤⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⡆⠠⢁⠲⠠⣾⡹⣎⣿⢿⡹⡾⠃⠄⡈⢐⠌⡐⢠⣕⢠⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠘⠁⠀⠀⠀⢨⠐⠠⢈⢣⠈⠗⠉⠀⠈⠏⢖⠁⠂⡤⠃⠔⠁⠺⢱⣟⣵⠌⠰⡀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠄⡁⢂⠐⡄⠀⢃⠂⠀⠈⠌⢎⠌⡠⠊⠀⠀⠀⠀⠈⠅⠀⠀⢡⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⡀⢀⠀⠀⠀⠀⠈⠆⡐⢀⠂⠜⡀⢸⠀⡀⣠⣈⠂⣔⡀⠀⠀⢀⠊⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⢀⠯⠴⣤⡁⠜⡠⢀⠀⠀⡇⠐⠠⢈⠐⣡⢸⢠⣾⣿⠏⣸⣿⣿⡆⢠⠚⠀⠀⠀⠀⠀⠀⡌⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⢸⣒⠢⠤⠌⡐⢀⠂⡉⢂⢟⡢⠥⠆⡴⠮⢹⣾⣿⡛⢠⣿⣿⣿⣟⠂⠀⠀⠀⠀⠀⠀⢠⠁⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⢸⢡⠫⠝⢂⠐⡀⢂⠐⡀⢂⠐⡉⠓⠬⠅⣸⣘⢿⠣⢾⢿⣿⣿⠃⠀⠀⠀⠀⠀⢀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⣎⡱⢃⠞⡄⠉⠐⠂⠐⠠⠆⡐⠠⢁⠂⡐⠠⢀⠂⡉⢲⠉⣱⠘⡀⠀⠀⠀⠀⡐⠁⠀⠌⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⣧⠣⣍⠺⠀⠀⠀⠀⠀⠀⠀⠈⠥⣂⠆⣠⠁⢂⠐⠠⢩⠠⢐⠀⠁⠀⠀⢀⠊⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠑⠓⠌⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⣿⡶⣪⠠⠽⣐⠼⢄⡀⢀⢠⡞⢃⡀⠀⢀⠃⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣥⠞⠁⠀⠀⠀⠀⠀⠈⠲⠊⢰⣌⢿⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣦⡛⠷⠍⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀  \n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⢠⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡄⠀⠀⠀⠀⠀⣠⡀⠀⠀⠀\n"
				+ "⠀⠀⠀⢀⣀⣀⠀⢹⣿⢀⣀⡀⠀⠀⣀⣀⡀⠀⠀⣿⡇⠀⣀⡀⠀⢀⣀⣀⠀⠀⠀⠀⠀⠀⠀⣙⡋⢀⣰⣿⣀⠀⣿⡇⠀⠀⠀\n"
				+ "⠀⠀⢰⣿⡋⠛⠀⢺⣿⠛⢻⣷⠀⠘⠛⣙⣿⡆⠀⣿⣇⣼⡟⠁⢰⣿⠋⢻⣷⠀⠀⠀⠀⠀⠀⣿⣏⠘⢻⣿⠛⠀⣿⡇⠀⠀⠀\n"
				+ "⠀⠀⠀⠛⢿⣷⡀⢼⣿⠀⢸⣿⠀⣴⡿⠛⣿⡇⠀⣿⡿⣿⣆⠀⢺⣟⠛⠛⠛⠀⠀⠀⠀⠀⠀⣿⡧⠀⢸⣿⠀⠀⠛⠃⠀⠀⠀\n"
				+ "⠀⠀⠸⣶⡶⠿⠀⢸⠿⠀⢸⢿⠀⠻⣷⡶⠿⠇⠀⡿⡇⠘⢿⠦⠘⠿⣶⡶⡦⠀⠀⠀⠀⠀⠀⢿⠗⠀⠸⢿⣶⠀⢿⡗⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "            ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				    
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀");
		sleep();
		System.out.println("⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠠⠠⠤⠄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⢰⠀⠀⠀⢰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡆⠀⠀⠀⢨⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡁⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⢀⠊⠉⠀⠀⠉⠁⠢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡆⠀⣀⠀⡄⠀⠀⠀⠀⠀⠀⢠⠁⠀⠀⠀⠀⠀⠀⠀⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠰⠑⡀⢃⠃⢣⠀⠀⢠⣰⣶⣤⣆⣀⣀⣀⡀⠀⠀⠀⠀⠰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⣇⠑⣸⠘⠄⠆⠀⠈⠲⠭⡗⣎⡴⣭⣶⣭⡯⣟⡓⣶⣤⣌⡠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⢆⠐⠠⠁⠌⡘⢀⠀⠀⠘⠘⢿⣗⡿⣝⣿⢞⣽⢢⢡⢺⡵⠯⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠠⡡⢂⠁⢂⠐⠠⢂⠀⠀⠀⠸⣿⣝⣯⢳⣏⢾⢙⠈⢺⡽⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⡏⠀⠙⢠⠈⡐⠘⡀⠀⠀⠀⠿⢼⣶⣫⡾⡛⢌⠐⠠⢒⠤⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⡆⠠⢁⠲⠠⣾⡹⣎⣿⢿⡹⡾⠃⠄⡈⢐⠌⡐⢠⣕⢠⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠘⠁⠀⠀⠀⢨⠐⠠⢈⢣⠈⠗⠉⠀⠈⠏⢖⠁⠂⡤⠃⠔⠁⠺⢱⣟⣵⠌⠰⡀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠈⠄⡁⢂⠐⡄⠀⢃⠂⠀⠈⠌⢎⠌⡠⠊⠀⠀⠀⠀⠈⠅⠀⠀⢡⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⡀⢀⠀⠀⠀⠀⠈⠆⡐⢀⠂⠜⡀⢸⠀⡀⣠⣈⠂⣔⡀⠀⠀⢀⠊⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⢀⠯⠴⣤⡁⠜⡠⢀⠀⠀⡇⠐⠠⢈⠐⣡⢸⢠⣾⣿⠏⣸⣿⣿⡆⢠⠚⠀⠀⠀⠀⠀⠀⡌⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⢸⣒⠢⠤⠌⡐⢀⠂⡉⢂⢟⡢⠥⠆⡴⠮⢹⣾⣿⡛⢠⣿⣿⣿⣟⠂⠀⠀⠀⠀⠀⠀⢠⠁⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⢸⢡⠫⠝⢂⠐⡀⢂⠐⡀⢂⠐⡉⠓⠬⠅⣸⣘⢿⠣⢾⢿⣿⣿⠃⠀⠀⠀⠀⠀⢀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⣎⡱⢃⠞⡄⠉⠐⠂⠐⠠⠆⡐⠠⢁⠂⡐⠠⢀⠂⡉⢲⠉⣱⠘⡀⠀⠀⠀⠀⡐⠁⠀⠌⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⣧⠣⣍⠺⠀⠀⠀⠀⠀⠀⠀⠈⠥⣂⠆⣠⠁⢂⠐⠠⢩⠠⢐⠀⠁⠀⠀⢀⠊⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠑⠓⠌⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⣿⡶⣪⠠⠽⣐⠼⢄⡀⢀⢠⡞⢃⡀⠀⢀⠃⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣥⠞⠁⠀⠀⠀⠀⠀⠈⠲⠊⢰⣌⢿⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣦⡛⠷⠍⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀   ⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "    ⠀⠀⠀⠀⠀⠀⠀⢠⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡄⠀⠀⠀⠀⠀⣠⡀⠀⠀⠀\n"
				+ "    ⠀⠀⠀⢀⣀⣀⠀⢹⣿⢀⣀⡀⠀⠀⣀⣀⡀⠀⠀⣿⡇⠀⣀⡀⠀⢀⣀⣀⠀⠀⠀⠀⠀⠀⠀⣙⡋⢀⣰⣿⣀⠀⣿⡇⠀⠀⠀\n"
				+ "    ⠀⠀⢰⣿⡋⠛⠀⢺⣿⠛⢻⣷⠀⠘⠛⣙⣿⡆⠀⣿⣇⣼⡟⠁⢰⣿⠋⢻⣷⠀⠀⠀⠀⠀⠀⣿⣏⠘⢻⣿⠛⠀⣿⡇⠀⠀⠀\n"
				+ "    ⠀⠀⠀⠛⢿⣷⡀⢼⣿⠀⢸⣿⠀⣴⡿⠛⣿⡇⠀⣿⡿⣿⣆⠀⢺⣟⠛⠛⠛⠀⠀⠀⠀⠀⠀⣿⡧⠀⢸⣿⠀⠀⠛⠃⠀⠀⠀\n"
				+ "    ⠀⠀⠸⣶⡶⠿⠀⢸⠿⠀⢸⢿⠀⠻⣷⡶⠿⠇⠀⡿⡇⠘⢿⠦⠘⠿⣶⡶⡦⠀⠀⠀⠀⠀⠀⢿⠗⠀⠸⢿⣶⠀⢿⡗⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀");
		sleep();
		System.out.println("⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠠⠠⠤⠄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⢰⠀⠀⠀⢰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡆⠀⠀⠀⢨⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡁⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⢀⠊⠉⠀⠀⠉⠁⠢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡆⠀⣀⠀⡄⠀⠀⠀⠀⠀⠀⢠⠁⠀⠀⠀⠀⠀⠀⠀⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠰⠑⡀⢃⠃⢣⠀⠀⢠⣰⣶⣤⣆⣀⣀⣀⡀⠀⠀⠀⠀⠰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⣇⠑⣸⠘⠄⠆⠀⠈⠲⠭⡗⣎⡴⣭⣶⣭⡯⣟⡓⣶⣤⣌⡠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⢆⠐⠠⠁⠌⡘⢀⠀⠀⠘⠘⢿⣗⡿⣝⣿⢞⣽⢢⢡⢺⡵⠯⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠠⡡⢂⠁⢂⠐⠠⢂⠀⠀⠀⠸⣿⣝⣯⢳⣏⢾⢙⠈⢺⡽⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⡏⠀⠙⢠⠈⡐⠘⡀⠀⠀⠀⠿⢼⣶⣫⡾⡛⢌⠐⠠⢒⠤⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⡆⠠⢁⠲⠠⣾⡹⣎⣿⢿⡹⡾⠃⠄⡈⢐⠌⡐⢠⣕⢠⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠘⠁⠀⠀⠀⢨⠐⠠⢈⢣⠈⠗⠉⠀⠈⠏⢖⠁⠂⡤⠃⠔⠁⠺⢱⣟⣵⠌⠰⡀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠈⠄⡁⢂⠐⡄⠀⢃⠂⠀⠈⠌⢎⠌⡠⠊⠀⠀⠀⠀⠈⠅⠀⠀⢡⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⡀⡇⠀⠀⠀⠀⠈⠆⡐⢀⠂⠜⡀⢸⠀⡀⣠⣈⠂⣔⡀⠀⠀⢀⠊⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⢀⠯⠴⣤⡇⠜⡠⢀⠀⠀⡇⠐⠠⢈⠐⣡⢸⢠⣾⣿⠏⣸⣿⣿⡆⢠⠚⠀⠀⠀⠀⠀⠀⡌⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⢸⣒⠢⠤⠌⡐⢀⠂⡉⢂⢟⡢⠥⠆⡴⠮⢹⣾⣿⡛⢠⣿⣿⣿⣟⠂⠀⠀⠀⠀⠀⠀⢠⠁⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⢸⢡⠫⠝⢂⠐⡀⢂⠐⡀⢂⠐⡉⠓⠬⠅⣸⣘⢿⠣⢾⢿⣿⣿⠃⠀⠀⠀⠀⠀⢀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⣎⡱⢃⠞⡄⠉⠐⠂⠐⠠⠆⡐⠠⢁⠂⡐⠠⢀⠂⡉⢲⠉⣱⠘⡀⠀⠀⠀⠀⡐⠁⠀⠌⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⣧⠣⣍⠺⠀⠀⠀⠀⠀⠀⠀⠈⠥⣂⠆⣠⠁⢂⠐⠠⢩⠠⢐⠀⠁⠀⠀⢀⠊⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠑⠓⠌⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⣿⡶⣪⠠⠽⣐⠼⢄⡀⢀⢠⡞⢃⡀⠀⢀⠃⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣥⠞⠁⠀⠀⠀⠀⠀⠈⠲⠊⢰⣌⢿⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣦⡛⠷⠍⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⢠⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡄⠀⠀⠀⠀⠀⣠⡀⠀⠀⠀\n"
				+ "⠀⠀⠀⢀⣀⣀⠀⢹⣿⢀⣀⡀⠀⠀⣀⣀⡀⠀⠀⣿⡇⠀⣀⡀⠀⢀⣀⣀⠀⠀⠀⠀⠀⠀⠀⣙⡋⢀⣰⣿⣀⠀⣿⡇⠀⠀⠀\n"
				+ "⠀⠀⢰⣿⡋⠛⠀⢺⣿⠛⢻⣷⠀⠘⠛⣙⣿⡆⠀⣿⣇⣼⡟⠁⢰⣿⠋⢻⣷⠀⠀⠀⠀⠀⠀⣿⣏⠘⢻⣿⠛⠀⣿⡇⠀⠀⠀\n"
				+ "⠀⠀⠀⠛⢿⣷⡀⢼⣿⠀⢸⣿⠀⣴⡿⠛⣿⡇⠀⣿⡿⣿⣆⠀⢺⣟⠛⠛⠛⠀⠀⠀⠀⠀⠀⣿⡧⠀⢸⣿⠀⠀⠛⠃⠀⠀⠀\n"
				+ "⠀⠀⠸⣶⡶⠿⠀⢸⠿⠀⢸⢿⠀⠻⣷⡶⠿⠇⠀⡿⡇⠘⢿⠦⠘⠿⣶⡶⡦⠀⠀⠀⠀⠀⠀⢿⠗⠀⠸⢿⣶⠀⢿⡗⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀");
		sleep();
		System.out.println("⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠠⠠⠤⠄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⢰⠀⠀⠀⢰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡆⠀⠀⠀⢨⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡁⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⢀⠊⠉⠀⠀⠉⠁⠢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡆⠀⣀⠀⡄⠀⠀⠀⠀⠀⠀⢠⠁⠀⠀⠀⠀⠀⠀⠀⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠰⠑⡀⢃⠃⢣⠀⠀⢠⣰⣶⣤⣆⣀⣀⣀⡀⠀⠀⠀⠀⠰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⣇⠑⣸⠘⠄⠆⠀⠈⠲⠭⡗⣎⡴⣭⣶⣭⡯⣟⡓⣶⣤⣌⡠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⢆⠐⠠⠁⠌⡘⢀⠀⠀⠘⠘⢿⣗⡿⣝⣿⢞⣽⢢⢡⢺⡵⠯⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠠⡡⢂⠁⢂⠐⠠⢂⠀⠀⠀⠸⣿⣝⣯⢳⣏⢾⢙⠈⢺⡽⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⡏⠀⠙⢠⠈⡐⠘⡀⠀⠀⠀⠿⢼⣶⣫⡾⡛⢌⠐⠠⢒⠤⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⡆⠠⢁⠲⠠⣾⡹⣎⣿⢿⡹⡾⠃⠄⡈⢐⠌⡐⢠⣕⢠⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠘⠁⠀⠀⠀⢨⠐⠠⢈⢣⠈⠗⠉⠀⠈⠏⢖⠁⠂⡤⠃⠔⠁⠺⢱⣟⣵⠌⠰⡀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠈⠄⡁⢂⠐⡄⠀⢃⠂⠀⠈⠌⢎⠌⡠⠊⠀⠀⠀⠀⠈⠅⠀⠀⢡⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⡀⢀⠀⠀⠀⠀⠈⠆⡐⢀⠂⠜⡀⢸⠀⡀⣠⣈⠂⣔⡀⠀⠀⢀⠊⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⢀⠯⠴⣤⡁⠜⡠⢀⠀⠀⡇⠐⠠⢈⠐⣡⢸⢠⣾⣿⠏⣸⣿⣿⡆⢠⠚⠀⠀⠀⠀⠀⠀⡌⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⢸⣒⠢⠤⠌⡐⢀⠂⡉⢂⢟⡢⠥⠆⡴⠮⢹⣾⣿⡛⢠⣿⣿⣿⣟⠂⠀⠀⠀⠀⠀⠀⢠⠁⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⢸⢡⠫⠝⢂⠐⡀⢂⠐⡀⢂⠐⡉⠓⠬⠅⣸⣘⢿⠣⢾⢿⣿⣿⠃⠀⠀⠀⠀⠀⢀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⣎⡱⢃⠞⡄⠉⠐⠂⠐⠠⠆⡐⠠⢁⠂⡐⠠⢀⠂⡉⢲⠉⣱⠘⡀⠀⠀⠀⠀⡐⠁⠀⠌⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⣧⠣⣍⠺⠀⠀⠀⠀⠀⠀⠀⠈⠥⣂⠆⣠⠁⢂⠐⠠⢩⠠⢐⠀⠁⠀⠀⢀⠊⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠑⠓⠌⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⣿⡶⣪⠠⠽⣐⠼⢄⡀⢀⢠⡞⢃⡀⠀⢀⠃⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣥⠞⠁⠀⠀⠀⠀⠀⠈⠲⠊⢰⣌⢿⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣦⡛⠷⠍⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀   ⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "    ⠀⠀⠀⠀⠀⠀⠀⢠⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡄⠀⠀⠀⠀⠀⣠⡀⠀⠀⠀\n"
				+ "    ⠀⠀⠀⢀⣀⣀⠀⢹⣿⢀⣀⡀⠀⠀⣀⣀⡀⠀⠀⣿⡇⠀⣀⡀⠀⢀⣀⣀⠀⠀⠀⠀⠀⠀⠀⣙⡋⢀⣰⣿⣀⠀⣿⡇⠀⠀⠀\n"
				+ "    ⠀⠀⢰⣿⡋⠛⠀⢺⣿⠛⢻⣷⠀⠘⠛⣙⣿⡆⠀⣿⣇⣼⡟⠁⢰⣿⠋⢻⣷⠀⠀⠀⠀⠀⠀⣿⣏⠘⢻⣿⠛⠀⣿⡇⠀⠀⠀\n"
				+ "    ⠀⠀⠀⠛⢿⣷⡀⢼⣿⠀⢸⣿⠀⣴⡿⠛⣿⡇⠀⣿⡿⣿⣆⠀⢺⣟⠛⠛⠛⠀⠀⠀⠀⠀⠀⣿⡧⠀⢸⣿⠀⠀⠛⠃⠀⠀⠀\n"
				+ "    ⠀⠀⠸⣶⡶⠿⠀⢸⠿⠀⢸⢿⠀⠻⣷⡶⠿⠇⠀⡿⡇⠘⢿⠦⠘⠿⣶⡶⡦⠀⠀⠀⠀⠀⠀⢿⠗⠀⠸⢿⣶⠀⢿⡗⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n"
				+ "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀");
		
		
	}
	private void sleep() {
		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	public ArrayList<Menu> getAlc() {
		return alc;
	}

	public ArrayList<Menu> getFood() {
		return food;
	}

	public ArrayList<MenuInfo> getMate() {
		return mate;
	}

	public void setAlc(ArrayList<Menu> alc) {
		this.alc = alc;
	}

	public void setFood(ArrayList<Menu> food) {
		this.food = food;
	}

	public void setMate(ArrayList<MenuInfo> mate) {
		this.mate = mate;
	}



}